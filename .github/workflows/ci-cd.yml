name: EcoCoderAgentCore CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: ecocoder-agent-core
  CONTAINER_NAME: ecocoder-agent-core

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest-xdist

    - name: Code formatting check
      run: |
        black --check app/ --diff
        isort --check-only app/ --diff

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      run: |
        mypy app/ --ignore-missing-imports

    - name: Run tests
      env:
        MOCK_MODE: "true"
        AWS_DEFAULT_REGION: us-east-1
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security scan
      uses: py-actions/bandit@v1
      with:
        path: "app/"
        
    - name: Run Safety check
      run: |
        pip install safety
        safety check --requirements requirements.txt

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=git-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update container image in task definition
      id: update-task-def
      if: github.ref == 'refs/heads/main'
      run: |
        # Update the task definition with new image URI
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:git-${{ github.sha }}"
        echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to Bedrock AgentCore Staging
      run: |
        # Deploy agent to staging environment
        aws bedrock-agentcore deploy \
          --agent-name ecocoder-agent-core-staging \
          --image-uri ${{ needs.build-and-push.outputs.image-uri }} \
          --config-file .bedrock_agentcore.yaml \
          --environment staging

    - name: Run integration tests
      run: |
        # Run integration tests against staging
        echo "Running integration tests..."
        # Add actual integration test commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to Bedrock AgentCore Production
      run: |
        # Deploy agent to production environment
        aws bedrock-agentcore deploy \
          --agent-name ecocoder-agent-core \
          --image-uri ${{ needs.build-and-push.outputs.image-uri }} \
          --config-file .bedrock_agentcore.yaml \
          --environment production

    - name: Verify deployment
      run: |
        # Verify the deployment was successful
        aws bedrock-agentcore describe-agent \
          --agent-name ecocoder-agent-core \
          --query 'Agent.Status' \
          --output text

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Clean up old ECR images
      run: |
        # Keep only the 5 most recent images
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --query 'sort_by(imageDetails,&imageDigest)[:-5].[imageDigest]' \
          --output text | \
        while read digest; do
          if [ ! -z "$digest" ]; then
            aws ecr batch-delete-image \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --image-ids imageDigest=$digest
          fi
        done